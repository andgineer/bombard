{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0412\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435","text":"<p>Bombard - \u044d\u0442\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u0442\u0440\u0435\u0441\u0441-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u0430\u0448\u0435\u0433\u043e HTTP-\u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041e\u043d \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0445\u043e\u0440\u043e\u0448 \u0434\u043b\u044f \u0441\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u0438 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0441\u043f\u043b\u0435\u0441\u043a\u0430 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439. \u0421 \u0435\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043b\u0435\u0433\u043a\u043e \u0438 \u0431\u044b\u0441\u0442\u0440\u043e \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> <p>\u041e\u043d \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d, \u0447\u0442\u043e\u0431\u044b \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u043c, \u043d\u043e \u043c\u043e\u0449\u043d\u044b\u043c \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u043d\u0430\u0433\u0440\u0443\u0437\u043e\u0447\u043d\u043e\u0433\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> <p>\u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0434\u0430 Python \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0435\u0433\u043a\u043e \u0438 \u0431\u044b\u0441\u0442\u0440\u043e \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432.</p> <p>\u041e\u0442\u0447\u0435\u0442 \u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443 \u0441\u043f\u043e\u0441\u043e\u0431\u0435\u043d \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0442\u044c \u0432\u0430\u0448 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u0441 \u043a\u0430\u043a\u043e\u0439 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u043e\u0439.</p>"},{"location":"#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","text":"<p>\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c URL, \u043d\u043e \u043b\u0435\u0433\u043a\u043e \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0438 JSON, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a:</p> <pre><code>- url: https://example.com/login\n  method: POST\n  body:\n    username: !python str(supply('username'))\n    password: !python str(supply('password'))\n  save:\n    token: response.json()['token']\n</code></pre> <p>\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d, \u043a\u0430\u043a \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0448\u0435.</p> <p>\u0418 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445:</p> <pre><code>- url: https://example.com/api\n  headers:\n    Authorization: !python '\"Bearer \" + str(supply(\"token\"))'\n</code></pre>"},{"location":"#_3","title":"\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>\u0414\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432:</p> <pre><code>bombard --examples\n</code></pre>"},{"location":"#_4","title":"\u041a\u043e\u043c\u0430\u043d\u0434\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430","text":"<p>\u0418\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432, \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0432\u0438\u0434 \u043e\u0442\u0447\u0435\u0442\u0430 \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435.</p> <p>\u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b <code>bombard.yaml</code> \u0438\u0437 \u043b\u044e\u0431\u043e\u0433\u043e \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0432\u0448\u0435\u0433\u043e\u0441\u044f \u0432\u0430\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0430:</p> <pre><code>bombard --example http_get --reload\n</code></pre>"},{"location":"#_5","title":"\u041e\u0442\u0447\u0435\u0442","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0442\u0447\u0435\u0442\u0430 \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b:</p> <pre><code>bombard --example http_get --repeat 1000\n</code></pre>"},{"location":"#_6","title":"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434","text":"<p>GitHub</p>"},{"location":"campaign/","title":"\u0424\u0430\u0439\u043b \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u0438","text":"<p>\u0412\u0441\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438.</p> <p>\u041d\u043e \u0432\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0440\u0430\u0437\u0434\u0435\u043b <code>prepare</code> \u0438\u043b\u0438 <code>ammo</code>, \u0442\u0430\u043a \u0447\u0442\u043e Bombard \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> <p>\u0412\u0435\u0437\u0434\u0435, \u0433\u0434\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f Python <code>{}</code>, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>repeat: \"{args.repeat * 2}\"\n</code></pre> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u043a\u0430\u043a <code>args</code> \u0432 \u044d\u0442\u0438\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445. \u0412\u0441\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 supply \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u043a\u0430\u043a \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435.</p>"},{"location":"campaign/#http","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b HTTP","text":"<p>\u0412\u0441\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b HTTP, \u043a\u0440\u043e\u043c\u0435 URL, \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438.</p> <pre><code>url: \"{host}auth\"  # \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 URL\nmethod: POST  # \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e GET\nbody:  # \u043d\u0438\u0436\u0435 JSON \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043b\u044f \u0442\u0435\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n    email: name@example.com\n    password: admin\nheaders:\n  json:  # \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0438 Content-Type: \"application/json\"\n  Authorization: \"Bearer {token}\"\n</code></pre>"},{"location":"campaign/#supply","title":"supply","text":"<p>\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043a\u0430\u043a <code>{name}</code> \u0432 \u0441\u0432\u043e\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445. \u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 (\u043f\u0435\u0440\u0435)\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u044d\u0442\u0443 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>--supply</code>, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>bombard -s name=value,name2=value2\n</code></pre> <p>\u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 (\u043f\u0435\u0440\u0435)\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u0445 \u0438\u0437 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> <p>\u0415\u0441\u043b\u0438 \u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0435\u0441\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b <code>extract</code>, \u043e\u043d (\u043f\u0435\u0440\u0435)\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e <code>supply</code> \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0430.</p> <p>\u0420\u0430\u0437\u0434\u0435\u043b <code>script</code> \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442 (\u043f\u0435\u0440\u0435)\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435.</p>"},{"location":"campaign/#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>\u0412\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u044d\u0442\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u0445 <code>prepare</code> \u0438 <code>ammo</code>, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u043d\u0438\u0436\u0435.</p> <p>\u041a\u0430\u0436\u0434\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c <code>URL</code>, \u0438 \u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435 \u044d\u0442\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e. \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>getToken:  # \u0418\u043c\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e \u0432\u0430\u0448\u0435\u043c\u0443 \u0432\u044b\u0431\u043e\u0440\u0443\n  repeat: \"{args.repeat * 2}\"  # \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e - \u043e\u043f\u0446\u0438\u044f --repeat\n  url: \"{host}auth\"  # \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e supply.base\n  method: POST  # \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e GET\n  headers: json  # \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0434\u043b\u044f Content-Type: application/json\n  body:  # JSON \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043b\u044f \u0442\u0435\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n    email: admin@example.com\n    password: admin\n  extract:  # \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 supply\n    token:\n</code></pre> <p>Bombard \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 <code>application/json</code> \u0432 headers, \u0435\u0441\u043b\u0438 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0442\u0435\u043b\u043e JSON. \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0434\u0440\u0443\u0433\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>Content-Type</code>, \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0435\u0433\u043e \u0432 \u0440\u0430\u0437\u0434\u0435\u043b <code>headers</code>, \u0438 \u043e\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.</p>"},{"location":"campaign/#repeat","title":"repeat","text":"<p>\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043e\u043f\u0446\u0438\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 <code>--repeat</code>. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.</p>"},{"location":"campaign/#script","title":"script","text":"<p>\u0412 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b <code>script</code> \u0441 \u043a\u043e\u0434\u043e\u043c Python3. \u041e\u043d \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.</p> <p>\u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 <code>supply</code> \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 <code>reload</code>. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 <code>ammo</code> \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u043a\u0430\u043a <code>ammo.request_name</code>.</p> <p>\u041e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>resp</code>.</p> <p>\u0412 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c \u043d\u0438\u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043c\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u044b <code>getPost</code> \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 <code>ammo</code> \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u044b\u0445 \u0442\u0440\u0435\u0445 \u043f\u043e\u0441\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432 \u043e\u0442\u0432\u0435\u0442\u0435:</p> <pre><code>for post in resp[:3]:\n  reload(ammo.getPost, id=post['id'])\n</code></pre> <p>\u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u043a\u043e\u0434 Python \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <pre><code>script: !include get_token.py\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u0435 \u044d\u0442\u0443 \u0441\u0442\u0440\u043e\u043a\u0443, \u043e\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u0432\u0442\u043e\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0432 \u0432\u0430\u0448\u0435\u0439 IDE:</p> <pre><code>from bombard.mock_globals import *; master('path/to/you/yaml')\n</code></pre>"},{"location":"campaign/#extract","title":"extract","text":"<p>\u0412\u043c\u0435\u0441\u0442\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b <code>extract</code> \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435. \u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043a\u0430\u0440\u0442\u0443 \u043f\u0430\u0440 <code>name: extract</code>. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0430\u0440\u044b Bombard \u0431\u0443\u0434\u0435\u0442 (\u043f\u0435\u0440\u0435)\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e <code>supply</code> \u0441 \u0438\u043c\u0435\u043d\u0435\u043c <code>name</code> \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c, \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u043d\u044b\u043c \u0438\u0437 \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a\u0430\u043a <code>['extract']</code>.</p> <pre><code>extract:\n    name: extract\n    name2: extract2\n</code></pre> <p>\u0415\u0441\u043b\u0438 <code>extract</code> \u043f\u0443\u0441\u0442\u043e, Bombard \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>name</code>, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 <code>name:</code> \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 <code>name: name</code>.</p> <p>\u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440</p> <pre><code>extract:\n    token: \"['data']['JWT']\"  # \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c resp['data']['JWT'] \u0432 supply.token\n</code></pre> <p>\u043f\u043e\u044d\u0442\u043e\u043c\u0443 <code>name: ['name']</code> \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 <code>name:</code>.</p>"},{"location":"campaign/#dry","title":"dry","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0435 Bombard \u0441 <code>--dry</code>, \u043e\u043d \u043d\u0435 \u0434\u0435\u043b\u0430\u0435\u0442 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0418 \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b <code>dry</code> \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435, Bombard \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043a\u0430\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u044d\u0442\u043e\u0433\u043e <code>dry</code> \u0437\u0430\u043f\u0440\u043e\u0441\u0430.</p>"},{"location":"campaign/#prepare","title":"prepare","text":"<p>\u0415\u0441\u043b\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u0438 \u0435\u0441\u0442\u044c \u044d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b, Bombard \u043d\u0430\u0447\u043d\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0430.</p> <p>\u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0432 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 <code>ammo</code>, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>prepare:\n  postsList:  # \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043f\u043e\u0441\u0442\u043e\u0432\n    url: \"{host}posts\"\n    script: |\n      for post in resp[:3]:  # \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c ammo.getPost \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u044b\u0445 \u0442\u0440\u0435\u0445 \u043f\u043e\u0441\u0442\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435\n        reload(ammo.getPost, id=post['id'])\n</code></pre> <p>\u041a\u0430\u043a \u0432\u044b \u0432\u0438\u0434\u0438\u0442\u0435 \u0432\u044b\u0448\u0435, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u043c\u0443 <code>supply</code>, \u043d\u043e \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0432 \u0437\u0430\u043f\u0440\u043e\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0435.</p> <p>\u0415\u0441\u043b\u0438 \u0440\u0430\u0437\u0434\u0435\u043b <code>prepare</code> \u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 <code>ammo</code>, Bombard \u043f\u043e\u0441\u043b\u0435 <code>prepare</code> \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442 \u0432\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 <code>ammo</code>.</p> <p>\u0418\u0442\u0430\u043a, \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u044b <code>extract</code> \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445 <code>prepare</code>. \u0418\u043b\u0438 \u0435\u0441\u043b\u0438 <code>scripts</code> \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445 <code>prepare</code> \u043d\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442 <code>reload</code> \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438\u0437 <code>ammo</code>. \u0422\u043e\u0433\u0434\u0430 Bombard \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442 \u0432\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b <code>ammo</code> \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 <code>prepare</code>.</p>"},{"location":"campaign/#ammo","title":"ammo","text":"<p>\u0415\u0441\u043b\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0435\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 <code>prepare</code>, Bombard \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442 \u0432\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0430.</p> <p>\u041a\u0430\u0436\u0434\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c\u0441\u044f <code>--repeat</code> \u0440\u0430\u0437, \u043a\u0430\u043a \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 (\u0438\u043b\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u043e\u043f\u0446\u0438\u0438).</p> <p>\u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 Bombard \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442 \u0440\u0430\u0437\u0434\u0435\u043b <code>prepare</code>, \u0438 \u043f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e, \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b <code>prepare</code> \u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b\u0438 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438\u0437 <code>ammo</code>, Bombard \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442 \u0432\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438\u0437 <code>ammo</code>.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 <code>ammo</code> \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b \u0432\u0438\u0434\u0438\u0442\u0435 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 <code>prepare</code>:</p> <pre><code>ammo:\n  getPost:\n    url: \"{host}posts/{id}\"  # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 {host} \u0438\u0437 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e supply \u0438 {id} \u0438\u0437 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e supply \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 - \u0441\u043c. \u0441\u043a\u0440\u0438\u043f\u0442 \u0432\u044b\u0448\u0435\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#bombard","title":"bombard","text":""},{"location":"reference/#bombard-modules","title":"Modules","text":""},{"location":"reference/#bombard.args","title":"bombard.args","text":"<p>Parse bombard command line args.</p>"},{"location":"reference/#bombard.args-attributes","title":"Attributes","text":""},{"location":"reference/#bombard.args.CAMPAIGN_FILE_NAME","title":"bombard.args.CAMPAIGN_FILE_NAME  <code>module-attribute</code>","text":"<pre><code>CAMPAIGN_FILE_NAME = 'bombard.yaml'\n</code></pre>"},{"location":"reference/#bombard.args.DIR_DESC_FILE_NAME","title":"bombard.args.DIR_DESC_FILE_NAME  <code>module-attribute</code>","text":"<pre><code>DIR_DESC_FILE_NAME = 'README.md'\n</code></pre>"},{"location":"reference/#bombard.args.EXAMPLES_PREFIX","title":"bombard.args.EXAMPLES_PREFIX  <code>module-attribute</code>","text":"<pre><code>EXAMPLES_PREFIX = 'bombard://'\n</code></pre>"},{"location":"reference/#bombard.args.INIT_EXAMPLE","title":"bombard.args.INIT_EXAMPLE  <code>module-attribute</code>","text":"<pre><code>INIT_EXAMPLE = 'easy.yaml'\n</code></pre>"},{"location":"reference/#bombard.args.REPEAT","title":"bombard.args.REPEAT  <code>module-attribute</code>","text":"<pre><code>REPEAT = 10\n</code></pre>"},{"location":"reference/#bombard.args.THREADS_NUM","title":"bombard.args.THREADS_NUM  <code>module-attribute</code>","text":"<pre><code>THREADS_NUM = 10\n</code></pre>"},{"location":"reference/#bombard.args.THRESHOLD","title":"bombard.args.THRESHOLD  <code>module-attribute</code>","text":"<pre><code>THRESHOLD = 1000\n</code></pre>"},{"location":"reference/#bombard.args.TIMEOUT","title":"bombard.args.TIMEOUT  <code>module-attribute</code>","text":"<pre><code>TIMEOUT = 15\n</code></pre>"},{"location":"reference/#bombard.args-functions","title":"Functions","text":""},{"location":"reference/#bombard.args.get_args","title":"bombard.args.get_args","text":"<pre><code>get_args() -&gt; Any\n</code></pre>"},{"location":"reference/#bombard.attr_dict","title":"bombard.attr_dict","text":"<p>Dict with access to keys as attributes.</p> <p>d = AttrDict({'a': 'b', 'c': 'g'}) d.c 'g'</p> <p>Instance can be used as callable to set value to the dict</p> <p>d = AttrDict({}) d(k='t') d.k 't'</p> <p>(!) All values that you set will be repeated to <code>master</code> that you used to init the object.</p> <p>master = {'j': 'l'} d = AttrDict(master) d(h='q') master['h'] 'q' d['w'] = 'e' master['w'] 'e'</p> <p>And it works without master</p> <p>d = AttrDict() d(f=7) d.f 7</p>"},{"location":"reference/#bombard.attr_dict-classes","title":"Classes","text":""},{"location":"reference/#bombard.attr_dict.AttrDict","title":"bombard.attr_dict.AttrDict","text":"<p>               Bases: <code>dict[str, Any]</code></p> <p>You can access all dict values as attributes. All changes immediately repeated in master_dict.</p> Attributes <code></code> bombard.attr_dict.AttrDict.master_dict <code>instance-attribute</code> <pre><code>master_dict = master_dict\n</code></pre>"},{"location":"reference/#bombard.bombardier","title":"bombard.bombardier","text":""},{"location":"reference/#bombard.bombardier-attributes","title":"Attributes","text":""},{"location":"reference/#bombard.bombardier.AMMO","title":"bombard.bombardier.AMMO  <code>module-attribute</code>","text":"<pre><code>AMMO = 'ammo'\n</code></pre>"},{"location":"reference/#bombard.bombardier.DEFAULT_OK","title":"bombard.bombardier.DEFAULT_OK  <code>module-attribute</code>","text":"<pre><code>DEFAULT_OK = {200}\n</code></pre>"},{"location":"reference/#bombard.bombardier.DEFAULT_OVERLOAD","title":"bombard.bombardier.DEFAULT_OVERLOAD  <code>module-attribute</code>","text":"<pre><code>DEFAULT_OVERLOAD = [502, 504]\n</code></pre>"},{"location":"reference/#bombard.bombardier.PREPARE","title":"bombard.bombardier.PREPARE  <code>module-attribute</code>","text":"<pre><code>PREPARE = 'prepare'\n</code></pre>"},{"location":"reference/#bombard.bombardier.log","title":"bombard.bombardier.log  <code>module-attribute</code>","text":"<pre><code>log = getLogger()\n</code></pre>"},{"location":"reference/#bombard.bombardier-classes","title":"Classes","text":""},{"location":"reference/#bombard.bombardier.Bombardier","title":"bombard.bombardier.Bombardier","text":"<p>               Bases: <code>WeaverMill</code></p> <p>Use horde of threads to make HTTP-requests</p> Attributes <code></code> bombard.bombardier.Bombardier.args <code>instance-attribute</code> <pre><code>args = args\n</code></pre> <code></code> bombard.bombardier.Bombardier.campaign <code>instance-attribute</code> <pre><code>campaign = campaign_book\n</code></pre> <code></code> bombard.bombardier.Bombardier.ok <code>instance-attribute</code> <pre><code>ok = ok_statuses if ok_statuses is not None else DEFAULT_OK\n</code></pre> <code></code> bombard.bombardier.Bombardier.overload <code>instance-attribute</code> <pre><code>overload = (\n    overload_statuses\n    if overload_statuses is not None\n    else DEFAULT_OVERLOAD\n)\n</code></pre> <code></code> bombard.bombardier.Bombardier.reporter <code>instance-attribute</code> <pre><code>reporter = Reporter(\n    time_units=\"ms\" if ms else None,\n    time_threshold_ms=int(threshold),\n    success_statuses=ok,\n)\n</code></pre> <code></code> bombard.bombardier.Bombardier.request_fired <code>instance-attribute</code> <pre><code>request_fired = False\n</code></pre> <code></code> bombard.bombardier.Bombardier.resp_count <code>instance-attribute</code> <pre><code>resp_count = 0\n</code></pre> <code></code> bombard.bombardier.Bombardier.show_request <code>instance-attribute</code> <pre><code>show_request = {1: 'Sent 1st request..'}\n</code></pre> <code></code> bombard.bombardier.Bombardier.show_response <code>instance-attribute</code> <pre><code>show_response = {1: 'Got 1st response..'}\n</code></pre> <code></code> bombard.bombardier.Bombardier.supply <code>instance-attribute</code> <pre><code>supply = supply if supply is not None else {}\n</code></pre> Functions <code></code> bombard.bombardier.Bombardier.beautify_url <code>staticmethod</code> <pre><code>beautify_url(\n    url: str, method: str, body: str | None\n) -&gt; str\n</code></pre> <code></code> bombard.bombardier.Bombardier.get_headers <code>staticmethod</code> <pre><code>get_headers(\n    request: dict[str, Any], body_is_json: bool\n) -&gt; dict[str, Any]\n</code></pre> <p>Treat special value 'json' as Content-Type: application/json</p> <code></code> bombard.bombardier.Bombardier.process_resp <pre><code>process_resp(\n    ammo: dict[str, Any],\n    status: int | str,\n    resp: str,\n    elapsed: int,\n    size: int,\n) -&gt; None\n</code></pre> <code></code> bombard.bombardier.Bombardier.reload <pre><code>reload(\n    requests: Any,\n    repeat: int | None = None,\n    prepare: bool = False,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Add request(s) to the bombardier queue <code>repeat</code>-times (args.repeat if None). If <code>repeat</code> field exists in the request additionally repeats as defined by it.</p> <p>Requests can be one request or list of requests. If supply specified it'll be used in addition to self.supply.</p> <p>Arg <code>prepare</code> indicate call from main, not from request script. So we know if any scripts call reload (self.request_fired)</p> <code></code> bombard.bombardier.Bombardier.report <pre><code>report() -&gt; None\n</code></pre> <code></code> bombard.bombardier.Bombardier.status_coloured <pre><code>status_coloured(status: str | int) -&gt; str\n</code></pre> <p>Paint ok status as green and overload as red using terminal control codes.</p> <p>If status has special string value (EXCEPTION_STATUS) paint it red.</p> <code></code> bombard.bombardier.Bombardier.worker <pre><code>worker(thread_id: int, job: dict[str, Any]) -&gt; None\n</code></pre> <p>Thread callable. Strike ammo from queue.</p>"},{"location":"reference/#bombard.bombardier-functions","title":"Functions","text":""},{"location":"reference/#bombard.bombardier.apply_supply","title":"bombard.bombardier.apply_supply","text":"<pre><code>apply_supply(s: str, supply: dict[str, Any]) -&gt; str\n</code></pre>"},{"location":"reference/#bombard.bombardier.apply_supply_dict","title":"bombard.bombardier.apply_supply_dict","text":"<pre><code>apply_supply_dict(\n    request: dict[str, Any], supply: dict[str, Any]\n) -&gt; dict[str, Any]\n</code></pre> <p>Use supply to substitute all {name} in request strings.</p>"},{"location":"reference/#bombard.bombardier-modules","title":"Modules","text":""},{"location":"reference/#bombard.campaign_yaml","title":"bombard.campaign_yaml","text":"<p>Bombard campaign loader.</p> <p>Extends yaml loader with loading external files <code>!include file.ext</code>. Excludes lines that import mock_globals.</p>"},{"location":"reference/#bombard.campaign_yaml-attributes","title":"Attributes","text":""},{"location":"reference/#bombard.campaign_yaml.SIGNATURE","title":"bombard.campaign_yaml.SIGNATURE  <code>module-attribute</code>","text":"<pre><code>SIGNATURE = 'bombard.mock_globals'\n</code></pre>"},{"location":"reference/#bombard.campaign_yaml.yaml","title":"bombard.campaign_yaml.yaml  <code>module-attribute</code>","text":"<pre><code>yaml = Yaml()\n</code></pre>"},{"location":"reference/#bombard.campaign_yaml-classes","title":"Classes","text":""},{"location":"reference/#bombard.campaign_yaml.IncludesLoader","title":"bombard.campaign_yaml.IncludesLoader","text":"<p>               Bases: <code>SafeLoader</code></p> Functions <code></code> bombard.campaign_yaml.IncludesLoader.include <pre><code>include(node)\n</code></pre> <code></code> bombard.campaign_yaml.IncludesLoader.wrap_in_yaml_document <code>staticmethod</code> <pre><code>wrap_in_yaml_document(msg: str) -&gt; str\n</code></pre> <p>Converts multi-line msg to yaml document that we can insert into yaml</p>"},{"location":"reference/#bombard.campaign_yaml.Yaml","title":"bombard.campaign_yaml.Yaml","text":"Functions bombard.campaign_yaml.Yaml.full_load <code>staticmethod</code> <pre><code>full_load(stream: Any, Loader: Any = None) -&gt; Any\n</code></pre> <p>Mimics yaml interface for seamless injection</p> <code></code> bombard.campaign_yaml.Yaml.load <code>staticmethod</code> <pre><code>load(stream: Any, Loader: Any = None) -&gt; Any\n</code></pre> <p>Mimics yaml interface for seamless injection</p>"},{"location":"reference/#bombard.expand_file_name","title":"bombard.expand_file_name","text":""},{"location":"reference/#bombard.expand_file_name-attributes","title":"Attributes","text":""},{"location":"reference/#bombard.expand_file_name-functions","title":"Functions","text":""},{"location":"reference/#bombard.expand_file_name.expand_relative_file_name","title":"bombard.expand_file_name.expand_relative_file_name","text":"<pre><code>expand_relative_file_name(file_name: str) -&gt; str\n</code></pre> <p>Replace RELATIVE_PREFIX with package folder.</p> <p>so bombard script can use internal examples without full path spec</p>"},{"location":"reference/#bombard.expand_file_name.get_campaign_file_name","title":"bombard.expand_file_name.get_campaign_file_name","text":"<pre><code>get_campaign_file_name(args: Any) -&gt; str\n</code></pre>"},{"location":"reference/#bombard.expand_file_name.show_folder","title":"bombard.expand_file_name.show_folder","text":"<pre><code>show_folder(folder_path: str) -&gt; None\n</code></pre>"},{"location":"reference/#bombard.http_request","title":"bombard.http_request","text":""},{"location":"reference/#bombard.http_request-attributes","title":"Attributes","text":""},{"location":"reference/#bombard.http_request.EXCEPTION_STATUS","title":"bombard.http_request.EXCEPTION_STATUS  <code>module-attribute</code>","text":"<pre><code>EXCEPTION_STATUS = '!!!'\n</code></pre>"},{"location":"reference/#bombard.http_request-functions","title":"Functions","text":""},{"location":"reference/#bombard.http_request.http_request","title":"bombard.http_request.http_request","text":"<pre><code>http_request(\n    url: str,\n    method: str = \"GET\",\n    headers: dict[str, Any] | None = None,\n    body: str | None = None,\n    timeout: int | None = None,\n) -&gt; tuple[int | str, Any]\n</code></pre> <p>Make HTTP request.</p> <p>Returns tuple:     ,"},{"location":"reference/#bombard.main","title":"bombard.main","text":"<p>Bombard's main</p>"},{"location":"reference/#bombard.main-attributes","title":"Attributes","text":""},{"location":"reference/#bombard.main-classes","title":"Classes","text":""},{"location":"reference/#bombard.main-functions","title":"Functions","text":""},{"location":"reference/#bombard.main.add_names_to_requests","title":"bombard.main.add_names_to_requests","text":"<pre><code>add_names_to_requests(\n    campaign_book: dict[str, Any],\n) -&gt; None\n</code></pre> <p>Duplicate names inside requests so worker will see it and use in stat report</p>"},{"location":"reference/#bombard.main.campaign","title":"bombard.main.campaign","text":"<pre><code>campaign(args: Any) -&gt; None\n</code></pre>"},{"location":"reference/#bombard.main.get_supply_from_cli","title":"bombard.main.get_supply_from_cli","text":"<pre><code>get_supply_from_cli(\n    supply: list[str] | None,\n) -&gt; dict[str, Any]\n</code></pre> <p>Extract key=value pairs from list of <code>supply</code> args</p>"},{"location":"reference/#bombard.main.guess_type","title":"bombard.main.guess_type","text":"<pre><code>guess_type(value: str) -&gt; str | int | float\n</code></pre> <p>Converts value in int or float if possible</p>"},{"location":"reference/#bombard.main.init","title":"bombard.main.init","text":"<pre><code>init(args: Any) -&gt; None\n</code></pre> <p>Copies the example to current folder as bombard.yaml</p>"},{"location":"reference/#bombard.main.load_book_supply","title":"bombard.main.load_book_supply","text":"<pre><code>load_book_supply(\n    cli_supply: dict[str, Any], book_supply: dict[str, Any]\n) -&gt; None\n</code></pre> <p>Updates CLI supply with supply from campaign book. But do not overwrite CLI supply with book supply - values from CLI have bigger priority.</p>"},{"location":"reference/#bombard.main.main","title":"bombard.main.main","text":"<pre><code>main() -&gt; None\n</code></pre>"},{"location":"reference/#bombard.main.start_campaign","title":"bombard.main.start_campaign","text":"<pre><code>start_campaign(\n    args: Any, campaign_book: dict[str, Any]\n) -&gt; None\n</code></pre>"},{"location":"reference/#bombard.mock_globals","title":"bombard.mock_globals","text":"<p>If you use include files for scripts add into them</p> <pre><code>from bombard.mock_globals import *; master(&lt;your yaml&gt;)\n</code></pre> <p>That defines globals so you have valid code and code autocomplete in your IDE editor. All strings with <code>bombard.examples.mock_globals</code> will be automatically removed before running bombard scripts.</p>"},{"location":"reference/#bombard.mock_globals-attributes","title":"Attributes","text":""},{"location":"reference/#bombard.mock_globals.ammo","title":"bombard.mock_globals.ammo  <code>module-attribute</code>","text":"<pre><code>ammo = _Ammo()\n</code></pre>"},{"location":"reference/#bombard.mock_globals.args","title":"bombard.mock_globals.args  <code>module-attribute</code>","text":"<pre><code>args = _Args()\n</code></pre>"},{"location":"reference/#bombard.mock_globals.resp","title":"bombard.mock_globals.resp  <code>module-attribute</code>","text":"<pre><code>resp = {}\n</code></pre>"},{"location":"reference/#bombard.mock_globals.supply","title":"bombard.mock_globals.supply  <code>module-attribute</code>","text":"<pre><code>supply = _Supply()\n</code></pre>"},{"location":"reference/#bombard.mock_globals-functions","title":"Functions","text":""},{"location":"reference/#bombard.mock_globals.master","title":"bombard.mock_globals.master","text":"<pre><code>master(yaml_file_name: str)\n</code></pre> <p>Add names from the yaml file to the unit globals. That makes code autocomplete work in bombard script.</p>"},{"location":"reference/#bombard.mock_globals.reload","title":"bombard.mock_globals.reload","text":"<pre><code>reload(requests, repeat=None, **kwargs)\n</code></pre>"},{"location":"reference/#bombard.pretty_ns","title":"bombard.pretty_ns","text":"<ul> <li>time_ns for Python before 3.7</li> <li>Elapsed context manager</li> <li>pretty_ns to represent time elapsed in human lovable form</li> </ul> <p>Usage:</p> <p>start = time_ns() import time time.sleep(0.0000001) pretty_ns((start + 100) - start) '0.1 mks'</p> <p>with Timer() as timer: ...     import time ...     time.sleep(0.0000001) ...     timer.pretty.endswith('s') ...     timer.ns &gt; 0 True True</p>"},{"location":"reference/#bombard.pretty_ns-attributes","title":"Attributes","text":""},{"location":"reference/#bombard.pretty_ns.time_ns","title":"bombard.pretty_ns.time_ns  <code>module-attribute</code>","text":"<pre><code>time_ns = time_ns\n</code></pre>"},{"location":"reference/#bombard.pretty_ns-classes","title":"Classes","text":""},{"location":"reference/#bombard.pretty_ns.Timer","title":"bombard.pretty_ns.Timer","text":"Attributes bombard.pretty_ns.Timer.ns <code>property</code> <pre><code>ns: int\n</code></pre> <code></code> bombard.pretty_ns.Timer.pretty <code>property</code> <pre><code>pretty: str\n</code></pre> <code></code> bombard.pretty_ns.Timer.start <code>instance-attribute</code> <pre><code>start: int\n</code></pre>"},{"location":"reference/#bombard.pretty_ns-functions","title":"Functions","text":""},{"location":"reference/#bombard.pretty_ns.emul_time_ns","title":"bombard.pretty_ns.emul_time_ns","text":"<pre><code>emul_time_ns() -&gt; int\n</code></pre>"},{"location":"reference/#bombard.pretty_ns.pretty_ns","title":"bombard.pretty_ns.pretty_ns","text":"<pre><code>pretty_ns(\n    elapsed_ns: int, fixed_units: str | None = None\n) -&gt; str\n</code></pre> <p>for earlier Python versions this is emulation of the Python3.7 time_ns</p>"},{"location":"reference/#bombard.pretty_sz","title":"bombard.pretty_sz","text":""},{"location":"reference/#bombard.pretty_sz-functions","title":"Functions","text":""},{"location":"reference/#bombard.pretty_sz.pretty_sz","title":"bombard.pretty_sz.pretty_sz","text":"<pre><code>pretty_sz(size: int | float) -&gt; str\n</code></pre>"},{"location":"reference/#bombard.report","title":"bombard.report","text":"<p>Bombard reporter.</p> <p>Use: * <code>log</code> to add each request result. * <code>report</code> to generate report.</p>"},{"location":"reference/#bombard.report-attributes","title":"Attributes","text":""},{"location":"reference/#bombard.report.ARRAY_UINT32","title":"bombard.report.ARRAY_UINT32  <code>module-attribute</code>","text":"<pre><code>ARRAY_UINT32 = 'L'\n</code></pre>"},{"location":"reference/#bombard.report.ARRAY_UINT64","title":"bombard.report.ARRAY_UINT64  <code>module-attribute</code>","text":"<pre><code>ARRAY_UINT64 = 'Q'\n</code></pre>"},{"location":"reference/#bombard.report.FAIL_GROUP","title":"bombard.report.FAIL_GROUP  <code>module-attribute</code>","text":"<pre><code>FAIL_GROUP = 'fail'\n</code></pre>"},{"location":"reference/#bombard.report.GROUPS","title":"bombard.report.GROUPS  <code>module-attribute</code>","text":"<pre><code>GROUPS = [SUCCESS_GROUP, FAIL_GROUP]\n</code></pre>"},{"location":"reference/#bombard.report.SIZE","title":"bombard.report.SIZE  <code>module-attribute</code>","text":"<pre><code>SIZE = 'size'\n</code></pre>"},{"location":"reference/#bombard.report.SUCCESS_GROUP","title":"bombard.report.SUCCESS_GROUP  <code>module-attribute</code>","text":"<pre><code>SUCCESS_GROUP = 'success'\n</code></pre>"},{"location":"reference/#bombard.report.TIME","title":"bombard.report.TIME  <code>module-attribute</code>","text":"<pre><code>TIME = 'time'\n</code></pre>"},{"location":"reference/#bombard.report.TIME_DENOMINATOR","title":"bombard.report.TIME_DENOMINATOR  <code>module-attribute</code>","text":"<pre><code>TIME_DENOMINATOR = 1\n</code></pre>"},{"location":"reference/#bombard.report-classes","title":"Classes","text":""},{"location":"reference/#bombard.report.Reporter","title":"bombard.report.Reporter","text":"<p>Report bombard's result</p> <p>Access to stat data only by log(), filter(), reduce()</p> Attributes bombard.report.Reporter.DIMENSIONS <code>instance-attribute</code> <pre><code>DIMENSIONS: dict[str, dict[str, Any]] = {\n    TIME: {\n        \"type\": ARRAY_UINT64,\n        \"pretty_func\": pretty_time,\n    },\n    SIZE: {\"type\": ARRAY_UINT32, \"pretty_func\": pretty_sz},\n}\n</code></pre> <code></code> bombard.report.Reporter.STAT_DEFAULT <code>instance-attribute</code> <pre><code>STAT_DEFAULT: dict[str, MutableSequence[Any]] = {\n    name: (array(params[\"type\"]))\n    for (name, params) in (items())\n}\n</code></pre> <code></code> bombard.report.Reporter.ok <code>instance-attribute</code> <pre><code>ok = success_statuses or {200}\n</code></pre> <code></code> bombard.report.Reporter.start_ns <code>instance-attribute</code> <pre><code>start_ns = time_ns()\n</code></pre> <code></code> bombard.report.Reporter.stat <code>instance-attribute</code> <pre><code>stat: dict[\n    str, dict[int, dict[str, MutableSequence[Any]]]\n] = {}\n</code></pre> <code></code> bombard.report.Reporter.time_threshold_ns <code>instance-attribute</code> <pre><code>time_threshold_ns = time_threshold_ms * 10 ** 6\n</code></pre> <code></code> bombard.report.Reporter.time_units <code>instance-attribute</code> <pre><code>time_units = time_units\n</code></pre> <code></code> bombard.report.Reporter.total_elapsed_ns <code>property</code> <pre><code>total_elapsed_ns: int\n</code></pre> Functions <code></code> bombard.report.Reporter.dimension_stat_report <code>staticmethod</code> <pre><code>dimension_stat_report(\n    dimension_values: MutableSequence[int | float],\n    pretty_func: Callable[[int | float], str],\n) -&gt; str\n</code></pre> <code></code> bombard.report.Reporter.filter <pre><code>filter(\n    dimension_name: str,\n    status_group_filter: str | None = None,\n    request_name_filter: str | None = None,\n) -&gt; MutableSequence[Any]\n</code></pre> <p>Filter the dimension by group and/or request_name, Returns array with values from dimention_name</p> <code></code> bombard.report.Reporter.filtered_report <pre><code>filtered_report(\n    status_group_filter: str | None = None,\n    request_name_filter: str | None = None,\n) -&gt; str\n</code></pre> <p>Filter by group and/or request_name. Returns report str with stats for all dimensions.</p> <code></code> bombard.report.Reporter.group_name_by_status <pre><code>group_name_by_status(status: int) -&gt; str\n</code></pre> <p>All this statuses should be in GROUPS</p> <code></code> bombard.report.Reporter.log <pre><code>log(\n    status: int | str,\n    elapsed: int,\n    request_name: str,\n    response_size: int,\n) -&gt; None\n</code></pre> <p>Add result to the report</p> <p>:param status: HTTP response status :param elapsed: Request-Response time, ns :param request_name: Request name or None :param response_size: Response body size</p> <code></code> bombard.report.Reporter.pretty_ns <pre><code>pretty_ns(elapsed_ns: int, paint: bool = True) -&gt; str\n</code></pre> <code></code> bombard.report.Reporter.pretty_time <pre><code>pretty_time(elapsed: int, paint: bool = True) -&gt; str\n</code></pre> <code></code> bombard.report.Reporter.reduce <pre><code>reduce(\n    reduce_func: Callable[[Any], Any],\n    dimension_name: str,\n    status_group_filter: str | None = None,\n    request_name_filter: str | None = None,\n) -&gt; int\n</code></pre> <p>Reduce the dimension by group and/or request_name with the reduce_func Returns dict {'time':, 'size':}</p> <code></code> bombard.report.Reporter.report <pre><code>report() -&gt; str\n</code></pre> <code></code> bombard.report.Reporter.statuses_report <pre><code>statuses_report(\n    request_name_filter: str | None = None,\n) -&gt; str\n</code></pre>"},{"location":"reference/#bombard.report-functions","title":"Functions","text":""},{"location":"reference/#bombard.report-modules","title":"Modules","text":""},{"location":"reference/#bombard.request_logging","title":"bombard.request_logging","text":"<p>Logger with thread storage to add to log information about request.</p> <p>Use main_thread/sending/receiving to switch logger modes.</p>"},{"location":"reference/#bombard.request_logging-attributes","title":"Attributes","text":""},{"location":"reference/#bombard.request_logging.log","title":"bombard.request_logging.log  <code>module-attribute</code>","text":"<pre><code>log = getLogger()\n</code></pre>"},{"location":"reference/#bombard.request_logging.pretty_ns","title":"bombard.request_logging.pretty_ns  <code>module-attribute</code>","text":"<pre><code>pretty_ns: Callable[[int], str] = pretty_ns\n</code></pre>"},{"location":"reference/#bombard.request_logging.thread_data","title":"bombard.request_logging.thread_data  <code>module-attribute</code>","text":"<pre><code>thread_data = local()\n</code></pre>"},{"location":"reference/#bombard.request_logging-classes","title":"Classes","text":""},{"location":"reference/#bombard.request_logging.RequestFormatter","title":"bombard.request_logging.RequestFormatter","text":"<p>               Bases: <code>Formatter</code></p> Functions <code></code> bombard.request_logging.RequestFormatter.format <pre><code>format(record: Any) -&gt; str\n</code></pre>"},{"location":"reference/#bombard.request_logging-functions","title":"Functions","text":""},{"location":"reference/#bombard.request_logging.main_thread","title":"bombard.request_logging.main_thread","text":"<pre><code>main_thread() -&gt; None\n</code></pre> <p>We are in main thread</p>"},{"location":"reference/#bombard.request_logging.receiving","title":"bombard.request_logging.receiving","text":"<pre><code>receiving() -&gt; None\n</code></pre> <p>Got response to request</p>"},{"location":"reference/#bombard.request_logging.sending","title":"bombard.request_logging.sending","text":"<pre><code>sending(\n    thread_id: int, request_id: str, request_name: str\n) -&gt; None\n</code></pre> <p>Start sending request</p>"},{"location":"reference/#bombard.request_logging.setup_logging","title":"bombard.request_logging.setup_logging","text":"<pre><code>setup_logging(\n    level: int, log_file_name: str | None = None\n) -&gt; None\n</code></pre>"},{"location":"reference/#bombard.show_descr","title":"bombard.show_descr","text":""},{"location":"reference/#bombard.show_descr-functions","title":"Functions","text":""},{"location":"reference/#bombard.show_descr.markdown_for_terminal","title":"bombard.show_descr.markdown_for_terminal","text":"<pre><code>markdown_for_terminal(descr: str) -&gt; str\n</code></pre>"},{"location":"reference/#bombard.terminal_colours","title":"bombard.terminal_colours","text":"<p>Colourize text in terminal source https://en.wikipedia.org/wiki/ANSI_escape_code#Colors</p> <p>You can use it function style</p> <p>green('Hello!') '\\x1b[1;32mHello!\\x1b[0m'</p> <p>Or include style</p> <p>f'{YELLOW}Hello{OFF}, {RED}world{OFF}!' '\\x1b[1;33mHello\\x1b[0m, \\x1b[1;31mworld\\x1b[0m!'</p> <p>Under the hood this is colorama. But I keep my wrapper in this module as legacy.</p>"},{"location":"reference/#bombard.terminal_colours-attributes","title":"Attributes","text":""},{"location":"reference/#bombard.terminal_colours.BROWN","title":"bombard.terminal_colours.BROWN  <code>module-attribute</code>","text":"<pre><code>BROWN = code_to_chars(f'{DIM};{YELLOW}')\n</code></pre>"},{"location":"reference/#bombard.terminal_colours.DARK_RED","title":"bombard.terminal_colours.DARK_RED  <code>module-attribute</code>","text":"<pre><code>DARK_RED = code_to_chars(f'{DIM};{RED}')\n</code></pre>"},{"location":"reference/#bombard.terminal_colours.GRAY","title":"bombard.terminal_colours.GRAY  <code>module-attribute</code>","text":"<pre><code>GRAY = code_to_chars(f'{BRIGHT};{BLACK}')\n</code></pre>"},{"location":"reference/#bombard.terminal_colours.GREEN","title":"bombard.terminal_colours.GREEN  <code>module-attribute</code>","text":"<pre><code>GREEN = code_to_chars(f'{BRIGHT};{GREEN}')\n</code></pre>"},{"location":"reference/#bombard.terminal_colours.OFF","title":"bombard.terminal_colours.OFF  <code>module-attribute</code>","text":"<pre><code>OFF = code_to_chars(RESET_ALL)\n</code></pre>"},{"location":"reference/#bombard.terminal_colours.RED","title":"bombard.terminal_colours.RED  <code>module-attribute</code>","text":"<pre><code>RED = code_to_chars(f'{BRIGHT};{RED}')\n</code></pre>"},{"location":"reference/#bombard.terminal_colours.YELLOW","title":"bombard.terminal_colours.YELLOW  <code>module-attribute</code>","text":"<pre><code>YELLOW = code_to_chars(f'{BRIGHT};{YELLOW}')\n</code></pre>"},{"location":"reference/#bombard.terminal_colours-functions","title":"Functions","text":""},{"location":"reference/#bombard.terminal_colours.brown","title":"bombard.terminal_colours.brown","text":"<pre><code>brown(s: str) -&gt; str\n</code></pre>"},{"location":"reference/#bombard.terminal_colours.dark_red","title":"bombard.terminal_colours.dark_red","text":"<pre><code>dark_red(s: str) -&gt; str\n</code></pre>"},{"location":"reference/#bombard.terminal_colours.gray","title":"bombard.terminal_colours.gray","text":"<pre><code>gray(s: str) -&gt; str\n</code></pre>"},{"location":"reference/#bombard.terminal_colours.green","title":"bombard.terminal_colours.green","text":"<pre><code>green(s: str) -&gt; str\n</code></pre>"},{"location":"reference/#bombard.terminal_colours.paint_it","title":"bombard.terminal_colours.paint_it","text":"<pre><code>paint_it(msg: str, colour: str) -&gt; str\n</code></pre>"},{"location":"reference/#bombard.terminal_colours.red","title":"bombard.terminal_colours.red","text":"<pre><code>red(s: str) -&gt; str\n</code></pre>"},{"location":"reference/#bombard.terminal_colours.yellow","title":"bombard.terminal_colours.yellow","text":"<pre><code>yellow(s: str) -&gt; str\n</code></pre>"},{"location":"reference/#bombard.version","title":"bombard.version","text":""},{"location":"reference/#bombard.version-attributes","title":"Attributes","text":""},{"location":"reference/#bombard.version.VERSION","title":"bombard.version.VERSION  <code>module-attribute</code>","text":"<pre><code>VERSION = '1.20.5'\n</code></pre>"},{"location":"reference/#bombard.weaver_mill","title":"bombard.weaver_mill","text":"<p>Multithreading jobs processor abstraction.</p> <p>Override method worker in descendant to do a job. Add jobs with <code>put</code>. Start processing with <code>start</code>.</p>"},{"location":"reference/#bombard.weaver_mill-classes","title":"Classes","text":""},{"location":"reference/#bombard.weaver_mill.WeaverMill","title":"bombard.weaver_mill.WeaverMill","text":"Attributes bombard.weaver_mill.WeaverMill.job_count <code>instance-attribute</code> <pre><code>job_count = 0\n</code></pre> <code></code> bombard.weaver_mill.WeaverMill.queue <code>instance-attribute</code> <pre><code>queue: Queue[dict[str, Any] | None] = Queue()\n</code></pre> <code></code> bombard.weaver_mill.WeaverMill.threads <code>instance-attribute</code> <pre><code>threads = []\n</code></pre> <code></code> bombard.weaver_mill.WeaverMill.threads_num <code>instance-attribute</code> <pre><code>threads_num = threads_num\n</code></pre> Functions <code></code> bombard.weaver_mill.WeaverMill.process <pre><code>process() -&gt; None\n</code></pre> <p>Starts all threads and lock until queue is empty</p> <code></code> bombard.weaver_mill.WeaverMill.put <pre><code>put(job: dict[str, Any]) -&gt; None\n</code></pre> <p>Add job to queue. To start processing use <code>process</code>.</p> <code></code> bombard.weaver_mill.WeaverMill.stop <pre><code>stop() -&gt; None\n</code></pre> <p>Stops all threads - send stop signal to queue and lock until they stop</p> <code></code> bombard.weaver_mill.WeaverMill.thread_worker <pre><code>thread_worker(thread_id: int) -&gt; None\n</code></pre> <p>Get job from queue and pass it to abstract worker that should be implemented in descendant.</p> <p>Even if worker throw exception we mark the job we gave him as done.</p> <p>Job == None is a signal to stop work.</p> <code></code> bombard.weaver_mill.WeaverMill.worker <code>abstractmethod</code> <pre><code>worker(thread_id: int, job: dict[str, Any]) -&gt; None\n</code></pre> <p>Implement your job processor, runs in thread.</p> <p>:param thread_id: just sequential number of the thread we work into :param job: job from queue</p>"},{"location":"report/","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0442\u0447\u0435\u0442\u0430","text":"<p>\u0414\u043b\u044f \u043e\u043a\u0440\u0430\u0448\u0438\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0442 \u0431\u043e\u043b\u0435\u0435 100 \u043c\u0441:</p> <pre><code>bombard --threshold\n</code></pre> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0432\u044b\u0432\u043e\u0434 \u043d\u0430 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>--quiet</code> \u0438\u043b\u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>--verbose</code>.</p> <p>\u0415\u0441\u0442\u044c \u0440\u044f\u0434 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u043f\u0446\u0438\u0439, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 <code>--help</code>.</p>"},{"location":"quickstart/bootstrap/","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0432\u043e\u0439 <code>bomard.yaml</code>, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 <code>--init</code>. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043e\u043d\u0430 \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 <code>easy.yaml</code></p> <pre><code>bombard --init\n</code></pre> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0430 <code>bombard</code> \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 <code>bomard.yaml</code>. \u041e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0435\u0433\u043e \u043f\u043e\u0434 \u0441\u0432\u043e\u0439 \u0441\u0435\u0440\u0432\u0435\u0440.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u0443 \u0434\u043b\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u0444\u0430\u0439\u043b\u0430, \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 <code>--example &lt;name&gt;</code> \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430:</p> <pre><code>bombard --init --example simple\n</code></pre> <p>\u0427\u0442\u043e\u0431\u044b \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>--examples</code>:</p> <pre><code>bombard --examples\n</code></pre>"},{"location":"quickstart/install/","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"<pre><code>pip install bombard --upgrade\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e Python, \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a:</p> <pre><code>python3.7 -m pip install bombard --upgrade\n</code></pre>"}]}